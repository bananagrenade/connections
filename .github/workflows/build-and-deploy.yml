## This workflow uses actions that are not certified by GitHub.
## They are provided by a third-party and are governed by
## separate terms of service, privacy policy, and support
## documentation.
## This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
## For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
#
name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # Run unit tests
      - name: Run unit tests
        run: ./gradlew test

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # Copy the built JAR file to the workspace
      - name: Copy JAR file to workspace
        run: cp build/libs/connections-*-SNAPSHOT.jar $GITHUB_WORKSPACE/app.jar
  #      - name: Upload build artifacts
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: Package
  #          path: build/libs
  #
  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0


  docker:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Copy the JAR file from the previous job
      - name: Copy JAR file from build job
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          path: ${{ github.workspace }}
#
##      # Login to Amazon ECR
##      - name: Login to Amazon ECR
##        run: aws ecr get-login-password --region <your-region> | docker login --username AWS --password-stdin <your-account-id>.dkr.ecr.<your-region>.amazonaws.com
##
##      # Tag the Docker image
##      - name: Tag Docker image
##        run: docker tag my-spring-boot-app:latest <your-account-id>.dkr.ecr.<your-region>.amazonaws.com/my-spring-boot-app:latest
##
##      # Push the Docker image to Amazon ECR
##      - name: Push Docker image to Amazon ECR
##        run: docker push <your-account-id>.dkr.ecr.<your-region>.amazonaws.com/my-spring-boot-app:latest
